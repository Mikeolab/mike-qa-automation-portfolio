{"version":3,"sources":["block-lottie-benefit.js"],"names":["loadLottieAnimation","className","jsonPath","autoplay","arguments","length","undefined","document","webcontainer","querySelectorAll","response","ok","Error","json","then","statusText","anim","lottie","loadAnimation","animationData","container","loop","animInstance","error","console","randomTwickAnimation","randomElement","elements","activeElements","Array","from","filter","element","closest","Math","floor","random","setTimeout","goToAndPlay","stop","setInterval"],"mappings":"AAAA,SAASA,oBAAoBC,EAAWC,GAA4B,IAAlBC,EAAQ,EAAAC,UAAAC,QAAAC,KAAAA,IAAAF,UAAA,IAAAA,UAAA,GAA1DG,SAASP,iBAAoBC,IAAAA,OAAAA,CAAWC,CAAAA,EAAAA,QAA4B,SAAAM,GAAlBL,EAErCM,MAAAA,CAAAA,EACDD,KAAc,SAAAE,GACd,GAAAA,EAAAC,GAIsBC,OAAMF,EAAAG,KAAA,EAFvBC,MAAK,IAAAF,MAAAF,+BAAYA,EAAAK,UAAA,CAGd,CAAA,EACOL,KAAAA,SAAAA,GASNM,EAAAC,OAAAC,cAPCC,CACWC,UAAAZ,EACEA,SAAY,MAAEa,KAAA,CAAA,EACflB,SAAKA,EACLgB,cAAAA,CACAhB,CAEb,EAIDK,EAAAc,aAAAN,CACAR,CAAAA,EAAAA,MAEG,SAAAe,GACKA,QAAMA,MAAA,gDAAuDA,CAAA,CACvE,CAAA,EAENC,QAAcD,MAAA,yBAA0B,CAE9C,CAAA,CACN,CAMA,SACIE,uBACA,IAYQC,EAZFC,EAAWpB,SAASE,iBAAiB,6BAA6B,EAIpEmB,EAAuBC,MAAAC,KAAAH,CAAA,EAAAI,OAAyB,SAAAC,GAClD,OAAAA,EAAAC,QAAA,wBAAA,CAEF,CAAA,EAE0BL,EAAhBF,EAAarB,SAGfqB,EAAAE,EAAAM,KAAAC,MAAAD,KAAAE,OAAA,EAAAR,EAAAvB,MAAA,IADciB,eAKde,EAAWf,aAAMgB,YAAA,CAAA,EAGrBD,WAAA,WACJX,EAAAJ,aAAAiB,KAAA,CACJ,EAAA,GAAA,EAAA,CA1BAvC,oBAAoB,qBAAsB,2CAA4C,CAAA,CAAI,EAC1FA,oBAAoB,wBAAyB,8CAA+C,CAAA,CAAI,EA2BhGwC,YAAYf,qBAAsB,GAAI","file":"../../js/blocks/src/block-lottie-benefit.js","sourcesContent":["function loadLottieAnimation(className, jsonPath, autoplay = false) {\n    // Select all elements with the specified class\n    document.querySelectorAll(`.${className}`).forEach(function(webcontainer) {\n        if (webcontainer) {\n            // Fetch the animation data from the JSON file\n            fetch(jsonPath)\n                .then(response => {\n                    if (!response.ok) {\n                        throw new Error('Network response was not ok ' + response.statusText);\n                    }\n                    return response.json();\n                })\n                .then(animationData => {\n                    var params = {\n                        container: webcontainer, // Use the webcontainer class element as container\n                        renderer: 'svg',\n                        loop: true,\n                        autoplay: autoplay,\n                        animationData: animationData\n                    };\n                    \n                    var anim = lottie.loadAnimation(params);\n\n                    // Store animation in the element for later access\n                    webcontainer.animInstance = anim;\n                })\n                .catch(error => {\n                    console.error('There was a problem with the fetch operation:', error);\n                });\n        } else {\n            console.error('Web container not found');\n        }\n    });\n}\n\n// Load animations for each class\nloadLottieAnimation('home-cta-animation', './assets/lotties/home-cta-animation.json', true);\nloadLottieAnimation('banner-line-animation', './assets/lotties/banner-line-animation.json', true);\n\nfunction randomTwickAnimation() {\n    // Select all elements with the class .o-benefits__pointimagepart\n    const elements = document.querySelectorAll('.o-benefits__pointimagepart');\n    \n    // Filter elements to only those inside an active .o-tab__content\n    const activeElements = Array.from(elements).filter(element => {\n        return element.closest('.o-tab__content.active');\n    });\n    \n    if (activeElements.length > 0) {\n        // Select a random element from the active elements\n        const randomElement = activeElements[Math.floor(Math.random() * activeElements.length)];\n        \n        if (randomElement.animInstance) {\n            // Play the animation\n            randomElement.animInstance.goToAndPlay(0);\n            \n            // Stop the animation after 5 seconds\n            setTimeout(() => {\n                randomElement.animInstance.stop();\n            }, 5000);\n        }\n    }\n}\n\nsetInterval(randomTwickAnimation, 1000);\n\n"]}